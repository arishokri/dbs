services:
  postgres:
    image: postgres:17-alpine
    container_name: my_postgres
    ports:
      - "5432:5432" # Expose PostgreSQL on port 5432
    environment:
      POSTGRES_USER: postgres # Set a username for postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD} # Set a password for postgres
    networks:
      - net
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist data
    restart: unless-stopped

  pgvector:
    image: pgvector/pgvector:pg17 # or use 'build: .' if using custom Dockerfile
    container_name: my_pgvector
    ports:
      - "25432:5432" # Expose PostgreSQL on port 5432
    environment:
      POSTGRES_USER: postgres # Set a username for PostgreSQL
      POSTGRES_PASSWORD: ${DB_PASSWORD} # Set a password for PostgreSQL
    networks:
      - net
    volumes:
      - pgvector_data:/var/lib/postgresql/data # Persist data
    restart: unless-stopped

  mongo:
    image: mongodb/mongodb-community-server:7.0.5-ubi8
    container_name: my_mongo
    ports:
      - "27017:27017" # Expose MongoDB on port 27017
    environment:
      MONGODB_INITDB_ROOT_USERNAME: root # Set a username for MongoDB
      MONGODB_INITDB_ROOT_PASSWORD: ${DB_PASSWORD} # Set a password for MongoDB
    networks:
      - net
    volumes:
      - mongo_data:/data/db # Persist data
      - mongo_config_data:/data/configdb # Persist config data
    restart: unless-stopped

  chroma:
    image: chromadb/chroma:1.0.10.dev21
    container_name: my_chroma
    ports:
      - "8000:8000" # Expose Chroma on port 8000
    environment:
      CHROMA_DB_TYPE: "sqlite" # Use SQLite as the database
    networks:
      - net
    volumes:
      - chroma_data:/data # Map local chroma-data directory to the container's /data
      - ./chroma_config.yaml:/config.yaml # Map the local config.yaml to the container's config.yaml
    restart: unless-stopped

networks:
  net:
    driver: bridge

volumes:
  postgres_data:
  pgvector_data:
  mongo_data:
  mongo_config_data:
  chroma_data:
